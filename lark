#!/usr/bin/python
import lexer
import parse_rules
import lark_utils
import terms
import parse_expr
import sys


Fail = lark_utils.Fail

import lark_int, lark_list, lark_str
exprs = []
def exe_text(x):
    global exprs
    rules = []
    to_eval = []
    # add in dill for speed at some point
    exprs = lark_int.int_rules + lark_list.list_rules + lark_str.str_rules
    exprs += lexer.to_rules(x)
    exprs, parser_exprs = parse_rules.parse_rules(exprs)
    exprs.reverse()
#    print "Rules Compiled"
    compiled_parts = []
    to_eval =["main"]
    for i in to_eval:
        i = i.strip()
        if i!="":
            compiled_parts.append(parse_expr.parse_expr(lexer.lex(i), parser_exprs))
#    print "Expressions Compiled"
    # for x,y in exprs:
    #     print lark_utils.flatten2(x), lark_utils.flatten2(y)

    for i in compiled_parts:
        to_exe = terms.seq(lexer.lex("str(") + terms.seq((i,)) + lexer.lex(")"))
        print(lark_str.str_val(to_exe.exe(exprs)))



# For testing:
# import cProfile
# def main_test():
#     cProfile.run('main()')
def main():
    if len(sys.argv) == 1:
        print("At least one argument needed")
    else:
        stdlib_file = open("stdlib.lark")
        text = stdlib_file.read() + "\n"
        stdlib_file.close()
        for f in sys.argv[1:]:
            opened_file = open(f)
            text += opened_file.read() + "\n"
            opened_file.close()
        exe_text(text)



if __name__ == "__main__":
    main()
